#!/bin/sh /etc/rc.common

START=90
USE_PROCD=1

validate_bootentries_section() {
	uci_load_validate bootentries bootentries "$1" "$2" \
		'boot_partition:string' \
		'boot_path:string:/' \
		'cmdline_default:string' \
		'cmdline_iscsi:string' \
		'cmdline_remove:string' \
		'menu_title:string:OpenWrt PXE Boot Menu' \
		'menu_username:string' \
		'menu_password:string'
}

bootentries_config() {
	[ "$2" = 0 ] || {
		echo "validation failed"
		return 1
	}

	cat > /srv/tftp/ipxe/entry.ipxe <<EOF
#!ipxe
  
login
set boot-url http://\${username:uristring}:\${password:uristring}@$(uci get network.lan.ipaddr):81/
chain \${boot-url}bootentries/menu.ipxe
EOF

	rm -rf /srv/tftp/bootentries
	mkdir /srv/tftp/bootentries

	cat > /tmp/partial.ipxe.header.tmp <<EOF
#!ipxe

:start
menu $menu_title
item --gap --             ------------------------- Operating systems ------------------------------
EOF

	cat > /tmp/partial.ipxe.contents.tmp <<EOF
item --gap --             ------------------------- Advanced options -------------------------------
item config               Configure settings
item shell                Drop to iPXE shell
item reboot               Reboot computer
item
item exit                 Exit iPXE and continue BIOS boot
choose selected || goto shell
goto \${selected}

:shell
echo Type 'exit' to get the back to the menu
shell
goto start

:failed
echo Booting failed, dropping to shell
goto shell

:reboot
reboot

:exit
exit

:config
config
goto start

# Boot entries
EOF

	umount -f /mnt || true
	mount -o ro "$boot_partition" /mnt || return 1

	entries_found="0"
	if [ -d "/mnt/$boot_path/loader/entries" ]; then
		echo "Searching for BootLoaderSpec files in /mnt/$boot_path/loader/entries ..."
		# Create an menu entry for every BootLoaderSpec file
		for entry in "/mnt/$boot_path/loader/entries"/*.conf; do
			TITLE="$(sed -n 's/^title[ \t]*\(.*\)/\1/p' $entry)"
			KERNEL_PATH="$(sed -n 's/^linux[ \t]*\(.*\)/\1/p' $entry)"
			INITRD_PATH="$(sed -n 's/^initrd[ \t]*\(.*\)/\1/p' $entry)"
			OPTIONS="$(sed -n 's/^options[ \t]*\(.*\)/\1/p' $entry | sed 's/ quiet//g')"
			if [ -n "$TITLE" -a -n "$KERNEL_PATH" -a -n "$INITRD_PATH" ]; then
				LABEL="$(basename "$entry")"
				mkdir -p "/srv/tftp/bootentries/$LABEL"
				KERNEL_FILE="$(basename "$KERNEL_PATH")"
				INITRD_FILE="$(basename "$INITRD_PATH")"
				KERNEL_IMG="bootentries/$LABEL/$KERNEL_FILE"
				INITRD_IMG="bootentries/$LABEL/$INITRD_FILE"
				cp "/mnt/$boot_path/$KERNEL_PATH" "/srv/tftp/$KERNEL_IMG"
				cp "/mnt/$boot_path/$INITRD_PATH" "/srv/tftp/$INITRD_IMG"
				chmod 644 "/srv/tftp/$KERNEL_IMG"
				chmod 644 "/srv/tftp/$INITRD_IMG"
				echo -e "item $LABEL $TITLE" >> /tmp/partial.ipxe.header.tmp
		
				echo -e "" >> /tmp/partial.ipxe.contents.tmp
				echo -e ":$LABEL" >> /tmp/partial.ipxe.contents.tmp
				echo -e "kernel \${boot-url}$KERNEL_IMG" >> /tmp/partial.ipxe.contents.tmp
				echo -e "initrd \${boot-url}$INITRD_IMG" >> /tmp/partial.ipxe.contents.tmp
				echo -e "imgargs $KERNEL_FILE initrd=$INITRD_FILE $OPTIONS $cmdline_iscsi" >> /tmp/partial.ipxe.contents.tmp
				echo -e "boot || goto failed">> /tmp/partial.ipxe.contents.tmp
				echo -e "goto start" >> /tmp/partial.ipxe.contents.tmp
				entries_found="$((entries_found+1))"
			fi
		done
	else
		echo "Searching for kernels in /mnt/$boot_path ..."
		for KERNEL_FILE in $(ls -t "/mnt/$boot_path" | grep 'vmlinuz-.*' | grep -v ".hmac$"); do
			KERNEL_VERSION="$(echo $KERNEL_FILE | sed 's/vmlinuz-//g')"
			# Find matching Initramfs image
			if [ -f "/mnt/$boot_path/initramfs-$KERNEL_VERSION.img" ]; then
				INITRD_FILE="initramfs-$KERNEL_VERSION.img"
			elif [ -f "/mnt/$boot_path/initrd.img-$KERNEL_VERSION" ]; then
				INITRD_FILE="initrd.img-$KERNEL_VERSION"
			else
				echo "Warning: could not find any initramfs image for PXE TFTP boot matching kernel $KERNEL_FILE, skipping..."
				continue
			fi
			LABEL="$KERNEL_FILE"
			mkdir -p "/srv/tftp/bootentries/$LABEL"
			KERNEL_IMG="bootentries/$LABEL/$KERNEL_FILE"
			INITRD_IMG="bootentries/$LABEL/$INITRD_FILE"
			cp "/mnt/$boot_path/$KERNEL_FILE" "/srv/tftp/$KERNEL_IMG"
			cp "/mnt/$boot_path/$INITRD_FILE" "/srv/tftp/$INITRD_IMG"
			chmod 644 "/srv/tftp/$KERNEL_IMG"
			chmod 644 "/srv/tftp/$INITRD_IMG"
			echo -e "item $LABEL $LABEL" >> /tmp/partial.ipxe.header.tmp
	
			echo -e "" >> /tmp/partial.ipxe.contents.tmp
			echo -e ":$LABEL" >> /tmp/partial.ipxe.contents.tmp
			echo -e "kernel \${boot-url}$KERNEL_IMG" >> /tmp/partial.ipxe.contents.tmp
			echo -e "initrd \${boot-url}$INITRD_IMG" >> /tmp/partial.ipxe.contents.tmp
			echo -e "imgargs $KERNEL_FILE initrd=$INITRD_FILE $cmdline_default $cmdline_iscsi" >> /tmp/partial.ipxe.contents.tmp
			echo -e "boot || goto failed">> /tmp/partial.ipxe.contents.tmp
			echo -e "goto start" >> /tmp/partial.ipxe.contents.tmp
			entries_found="$((entries_found+1))"
		done
	fi
	umount /mnt
	cat /tmp/partial.ipxe.header.tmp /tmp/partial.ipxe.contents.tmp > /srv/tftp/bootentries/menu.ipxe
	rm -f /tmp/partial.ipxe.*.tmp
	if [ "$entries_found" = "0" ]; then
		echo "Could not find any boot entries for PXE TFTP boot"
		return 1
	fi
	echo "Found $entries_found boot entries"
}

reload_service() {
	config_load bootentries
	config_foreach validate_bootentries_section bootentries bootentries_config
}

service_triggers() {
	procd_add_reload_trigger "bootentries"
	procd_add_validation validate_bootentries_section
}

start_service() {
	reload_service
}
