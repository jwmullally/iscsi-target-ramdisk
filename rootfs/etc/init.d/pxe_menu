#!/bin/sh /etc/rc.common

START=99
USE_PROCD=1


wait_for_lan_ipaddr() {
	. /lib/functions/network.sh
	echo "Waiting for LAN IP address..."
	while true; do
		network_flush_cache
		network_get_ipaddr LAN_IPADDR lan
		if [ -n "${LAN_IPADDR}" ]; then
			echo "LAN IP address found."
			return 0
		fi
		sleep 5
	done
}


error_exit() {
	echo "Error: " "$*"
	exit 1
}


validate_pxe_menu_section() {
	uci_load_validate pxe_menu pxe_menu "$1" "$2" \
		'boot_partition:string' \
		'boot_path:string:/' \
		'ibft:bool:0' \
		'cmdline_default:string' \
		'cmdline_iscsi:string' \
		'cmdline_remove:string' \
		'menu_title:string:iSCSI Target Ramdisk PXE Boot Menu' \
		'menu_username:string' \
		'menu_password:string'
}

pxe_menu_config() {
	[ "$2" = 0 ] || {
		echo "validation failed"
		return 1
	}

	wait_for_lan_ipaddr

	cat > /srv/pxe/tftp/ipxe/entry.ipxe <<EOF
#!ipxe
  
login
set target-server-ip $LAN_IPADDR
set boot-url http://\${username:uristring}:\${password:uristring}@\${target-server-ip}:81/
chain \${boot-url}cgi-bin/get-menu-ipxe
EOF

	mkdir /srv/pxe/pxe_menu

	IPXE_HEADER="/tmp/partial.ipxe.header.tmp"
	IPXE_MENU="/tmp/partial.ipxe.menu.tmp"
	IPXE_CONTENTS="/tmp/partial.ipxe.contents.tmp"

	cat > "$IPXE_HEADER" <<EOF
#!ipxe

EOF

	cat > "$IPXE_MENU" <<EOF

:start
menu $menu_title
item --gap --             ------------------------- Operating systems ------------------------------
EOF

	cat > "$IPXE_CONTENTS" <<EOF
item --gap --             ------------------------- Advanced options -------------------------------
item reload               Reload boot menu
item config               Configure settings
item shell                Drop to iPXE shell
item reboot               Reboot computer
item
item exit                 Exit iPXE and continue BIOS boot
choose selected || goto shell
goto \${selected}

:shell
echo Type 'exit' to get the back to the menu
shell
goto start

:failed
echo Booting failed, dropping to shell
goto shell

:reboot
reboot

:exit
exit

:config
config
goto start

:reload
chain --replace \${boot-url}cgi-bin/reload-menu-ipxe || goto failed

# Boot entries
EOF

	entries_found="0"
	umount /mnt 2> /dev/null || true

	if [ -n "$boot_partition" ]; then
		mount -o ro "$boot_partition" /mnt || error_exit "Unable to mount boot_partition: $boot_partition"
		test -d "/mnt/$boot_path" || error_exit "Unable to find boot_path $boot_path on boot_partition $boot_partition"

		if [ -d "/mnt/$boot_path/loader/entries" ]; then
			echo "Searching for BootLoaderSpec files in /mnt/$boot_path/loader/entries ..."
			# Create an menu entry for every BootLoaderSpec file
			for entry_file in $(ls -t "/mnt/$boot_path/loader/entries"); do
				entry="/mnt/$boot_path/loader/entries/$entry_file"
				if [ ! -f "$entry"  ]; then
					continue
				fi
				TITLE="$(sed -n 's/^title[ \t]*\(.*\)/\1/p' $entry)"
				KERNEL_PATH="$(sed -n 's/^linux[ \t]*\(.*\)/\1/p' $entry)"
				INITRD_PATH="$(sed -n 's/^initrd[ \t]*\(.*\)/\1/p' $entry)"
				OPTIONS="$(sed -n 's/^options[ \t]*\(.*\)/\1/p' $entry | sed 's/ quiet//g')"
				if [ -n "$TITLE" -a -n "$KERNEL_PATH" -a -n "$INITRD_PATH" ]; then
					LABEL="$(basename "$entry")"
					mkdir -p "/srv/pxe/pxe_menu/$LABEL"
					KERNEL_FILE="$(basename "$KERNEL_PATH")"
					INITRD_FILE="$(basename "$INITRD_PATH")"
					KERNEL_IMG="pxe_menu/$LABEL/$KERNEL_FILE"
					INITRD_IMG="pxe_menu/$LABEL/$INITRD_FILE"
					cp "/mnt/$boot_path/$KERNEL_PATH" "/srv/pxe/$KERNEL_IMG"
					cp "/mnt/$boot_path/$INITRD_PATH" "/srv/pxe/$INITRD_IMG"
					chmod 644 "/srv/pxe/$KERNEL_IMG"
					chmod 644 "/srv/pxe/$INITRD_IMG"
					echo -e "item $LABEL $TITLE" >> "$IPXE_MENU"
			
					echo -e "" >> "$IPXE_CONTENTS"
					echo -e ":$LABEL" >> "$IPXE_CONTENTS"
					if [ "$ibft" = "1" ]; then
						echo -e "set return_from_ibft ${LABEL}_ibft_return" >> "$IPXE_CONTENTS"
						echo -e "goto ibft" >> "$IPXE_CONTENTS"
						echo -e ":${LABEL}_ibft_return" >> "$IPXE_CONTENTS"
					fi
					echo -e "kernel \${boot-url}$KERNEL_IMG" >> "$IPXE_CONTENTS"
					echo -e "initrd \${boot-url}$INITRD_IMG" >> "$IPXE_CONTENTS"
					echo -e "imgargs $KERNEL_FILE initrd=$INITRD_FILE $OPTIONS $cmdline_iscsi" >> "$IPXE_CONTENTS"
					echo -e "boot || goto failed">> "$IPXE_CONTENTS"
					echo -e "goto start" >> "$IPXE_CONTENTS"
					entries_found="$((entries_found+1))"
				fi
			done
		else
			echo "Searching for kernels in /mnt/$boot_path ..."
			for KERNEL_FILE in $(ls -t "/mnt/$boot_path" | grep 'vmlinuz-.*' | grep -v ".hmac$"); do
				KERNEL_VERSION="$(echo $KERNEL_FILE | sed 's/vmlinuz-//g')"
				# Find matching Initramfs image
				if [ -f "/mnt/$boot_path/initramfs-$KERNEL_VERSION.img" ]; then
					INITRD_FILE="initramfs-$KERNEL_VERSION.img"
				elif [ -f "/mnt/$boot_path/initrd.img-$KERNEL_VERSION" ]; then
					INITRD_FILE="initrd.img-$KERNEL_VERSION"
				else
					echo "Warning: could not find any initramfs image for PXE TFTP boot matching kernel $KERNEL_FILE, skipping..."
					continue
				fi
				LABEL="$KERNEL_FILE"
				mkdir -p "/srv/pxe/pxe_menu/$LABEL"
				KERNEL_IMG="pxe_menu/$LABEL/$KERNEL_FILE"
				INITRD_IMG="pxe_menu/$LABEL/$INITRD_FILE"
				cp "/mnt/$boot_path/$KERNEL_FILE" "/srv/pxe/$KERNEL_IMG"
				cp "/mnt/$boot_path/$INITRD_FILE" "/srv/pxe/$INITRD_IMG"
				chmod 644 "/srv/pxe/$KERNEL_IMG"
				chmod 644 "/srv/pxe/$INITRD_IMG"
				echo -e "item $LABEL $LABEL" >> "$IPXE_MENU"
		
				echo -e "" >> "$IPXE_CONTENTS"
				echo -e ":$LABEL" >> "$IPXE_CONTENTS"
				if [ "$ibft" = "1" ]; then
					echo -e "set return_from_ibft ${LABEL}_ibft_return" >> "$IPXE_CONTENTS"
					echo -e "goto ibft" >> "$IPXE_CONTENTS"
					echo -e ":${LABEL}_ibft_return" >> "$IPXE_CONTENTS"
				fi
				echo -e "kernel \${boot-url}$KERNEL_IMG" >> "$IPXE_CONTENTS"
				echo -e "initrd \${boot-url}$INITRD_IMG" >> "$IPXE_CONTENTS"
				echo -e "imgargs $KERNEL_FILE initrd=$INITRD_FILE $cmdline_default $cmdline_iscsi" >> "$IPXE_CONTENTS"
				echo -e "boot || goto failed">> "$IPXE_CONTENTS"
				echo -e "goto start" >> "$IPXE_CONTENTS"
				entries_found="$((entries_found+1))"
			done
		fi
		umount /mnt || error_exit "Unable to unmount boot partition: '$boot_partition'"
	fi

	if [ "$ibft" = "1" ]; then
		echo -e "" >> "$IPXE_CONTENTS"
		echo -e ":ibft" >> "$IPXE_CONTENTS"
		echo -e "set initiator-iqn $(uci get tgt.1.allow_name)" >> "$IPXE_CONTENTS"
		echo -e "set username $(uci get tgt.user_in.user)" >> "$IPXE_CONTENTS"
		echo -e "set password $(uci get tgt.user_in.password)" >> "$IPXE_CONTENTS"
		echo -e "set reverse-username $(uci get tgt.user_out.user)" >> "$IPXE_CONTENTS"
		echo -e "set reverse-password $(uci get tgt.user_out.password)" >> "$IPXE_CONTENTS"

		lun_idx=0
		drive_idx="$(printf "%i" "0x80")"
		while uci get tgt.@lun[$lun_idx] &> /dev/null ; do
			lun_idx=$((lun_idx+1));
			target_uri="iscsi:\${target-server-ip}:::$lun_idx:$(uci get tgt.1.name)"
			drive="$(printf "%x" "$drive_idx")"
			drive_idx=$((drive_idx+1));
			echo "sanhook --drive 0x$drive $target_uri || goto failed" >> "$IPXE_CONTENTS"
		done
		echo -e "goto \${return_from_ibft}" >> "$IPXE_CONTENTS"

		echo -e "item sanboot iBFT SAN boot" >> "$IPXE_MENU"
		echo -e "" >> "$IPXE_CONTENTS"
		echo -e ":sanboot" >> "$IPXE_CONTENTS"
		echo -e "set return_from_ibft sanboot_ibft_return" >> "$IPXE_CONTENTS"
		echo -e "goto ibft" >> "$IPXE_CONTENTS"
		echo -e ":sanboot_ibft_return" >> "$IPXE_CONTENTS"
		echo -e "sanboot || goto failed" >> "$IPXE_CONTENTS"
		echo -e "goto start" >> "$IPXE_CONTENTS"
	fi

	cat \
		"$IPXE_HEADER" \
		"$IPXE_MENU" \
		"$IPXE_CONTENTS" \
		> /srv/pxe/pxe_menu/menu.ipxe
	rm -f /tmp/partial.ipxe.*.tmp

	echo "Found $entries_found boot entries"
	echo -e "\nFound $entries_found boot entries for PXE menu\n" > /dev/console
}

reload_service() {
	stop_service
	start_service
}

service_triggers() {
	procd_add_reload_trigger "pxe_menu"
	procd_add_validation validate_pxe_menu_section
}

start_service() {
	config_load pxe_menu
	config_foreach validate_pxe_menu_section pxe_menu pxe_menu_config
}

stop_service() {
	rm -f /srv/pxe/tftp/ipxe/entry.ipxe
	rm -rf /srv/pxe/pxe_menu
}
